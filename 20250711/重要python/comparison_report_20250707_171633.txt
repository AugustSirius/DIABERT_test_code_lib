Rust vs Python 结果对比报告
生成时间: 2025-07-07 17:16:33
================================================================================

================================================================================
Precursor结果 (IM过滤前)
================================================================================
Rust文件: /Users/augustsirius/Desktop/DIABERT_test_code_lib/20250707/timstof/precursor_result_before_IM_filter.csv
Python文件: /Users/augustsirius/Desktop/DIABERT_test_code_lib/python_precursor_result_before_IM_filter.csv

数据维度:
  Rust:   1,370,657 行 × 4 列
  Python: 1,395,638 行 × 4 列
  差异:   -24,981 行

列名: 完全一致

数值列统计对比:

  列 'intensity_values':
    Rust   - 均值: 102.3735, 标准差: 332.9210, 最小值: 10.0000, 最大值: 16889.0000
    Python - 均值: 101.7464, 标准差: 330.0167, 最小值: 10.0000, 最大值: 16889.0000
    均值差异: 0.6271 (0.61%)

  列 'rt_values_min':
    Rust   - 均值: 39.8482, 标准差: 17.1803, 最小值: 0.0366, 最大值: 95.0030
    Python - 均值: 40.2133, 标准差: 17.4640, 最小值: 0.0366, 最大值: 95.0054
    均值差异: 0.3651 (0.92%)

  列 'mobility_values':
    Rust   - 均值: 0.8417, 标准差: 0.0704, 最小值: 0.6029, 最大值: 1.1175
    Python - 均值: 0.8448, 标准差: 0.0732, 最小值: 0.6040, 最大值: 1.3121
    均值差异: 0.0032 (0.38%)

  列 'mz_values':
    Rust   - 均值: 498626.3245, 标准差: 723.2355, 最小值: 497281.0000, 最大值: 499798.0000
    Python - 均值: 498626.2129, 标准差: 724.6188, 最小值: 497280.0000, 最大值: 499800.0000
    均值差异: 0.1116 (0.00%)

m/z值分布分析:
  Rust独有的m/z值数量: 705
  Python独有的m/z值数量: 706
  共同的m/z值数量: 0

================================================================================
Precursor结果 (IM过滤后)
================================================================================
Rust文件: /Users/augustsirius/Desktop/DIABERT_test_code_lib/20250707/timstof/precursor_result_after_IM_filter.csv
Python文件: /Users/augustsirius/Desktop/DIABERT_test_code_lib/python_precursor_result_after_IM_filter.csv

数据维度:
  Rust:   641,325 行 × 4 列
  Python: 650,776 行 × 4 列
  差异:   -9,451 行

列名: 完全一致

数值列统计对比:

  列 'intensity_values':
    Rust   - 均值: 108.1015, 标准差: 411.7323, 最小值: 10.0000, 最大值: 16889.0000
    Python - 均值: 107.5189, 标准差: 408.7985, 最小值: 10.0000, 最大值: 16889.0000
    均值差异: 0.5825 (0.54%)

  列 'rt_values_min':
    Rust   - 均值: 41.4665, 标准差: 17.0149, 最小值: 0.0366, 最大值: 93.9105
    Python - 均值: 41.6188, 标准差: 17.1114, 最小值: 0.0366, 最大值: 94.8893
    均值差异: 0.1523 (0.37%)

  列 'mobility_values':
    Rust   - 均值: 0.8465, 标准差: 0.0153, 最小值: 0.8250, 最大值: 0.9243
    Python - 均值: 0.8478, 标准差: 0.0160, 最小值: 0.8258, 最大值: 0.9239
    均值差异: 0.0013 (0.15%)

  列 'mz_values':
    Rust   - 均值: 498632.2005, 标准差: 746.8995, 最小值: 497281.0000, 最大值: 499798.0000
    Python - 均值: 498635.2751, 标准差: 748.9088, 最小值: 497280.0000, 最大值: 499800.0000
    均值差异: 3.0746 (0.00%)

m/z值分布分析:
  Rust独有的m/z值数量: 705
  Python独有的m/z值数量: 706
  共同的m/z值数量: 0

================================================================================
Fragment结果 (IM过滤后)
================================================================================
Rust文件: /Users/augustsirius/Desktop/DIABERT_test_code_lib/20250707/timstof/frag_result.csv
Python文件: /Users/augustsirius/Desktop/DIABERT_test_code_lib/python_frag_result_after_IM_filter.csv

数据维度:
  Rust:   8,496,974 行 × 4 列
  Python: 575,523 行 × 4 列
  差异:   7,921,451 行

列名: 完全一致

数值列统计对比:

  列 'intensity_values':
    Rust   - 均值: 74.9608, 标准差: 113.2740, 最小值: 10.0000, 最大值: 9955.0000
    Python - 均值: 97.8561, 标准差: 219.8367, 最小值: 10.0000, 最大值: 8661.0000
    均值差异: 22.8954 (30.54%)

  列 'rt_values_min':
    Rust   - 均值: 52.2293, 标准差: 20.2019, 最小值: 0.0084, 最大值: 95.0177
    Python - 均值: 41.5902, 标准差: 17.5927, 最小值: 0.0137, 最大值: 95.0106
    均值差异: 10.6391 (20.37%)

  列 'mobility_values':
    Rust   - 均值: 0.8766, 标准差: 0.0288, 最小值: 0.8250, 最大值: 0.9243
    Python - 均值: 0.8485, 标准差: 0.0193, 最小值: 0.8258, 最大值: 0.9218
    均值差异: 0.0281 (3.21%)

  列 'mz_values':
    Rust   - 均值: 561213.7957, 标准差: 165233.8161, 最小值: 226161.0000, 最大值: 880533.0000
    Python - 均值: 528517.0944, 标准差: 157833.3904, 最小值: 226160.0000, 最大值: 880530.0000
    均值差异: 32696.7013 (5.83%)

m/z值分布分析:
  Rust独有的m/z值数量: 872
  Python独有的m/z值数量: 870
  共同的m/z值数量: 121
  重叠率: 6.49%

================================================================================
MS1 Fragment矩阵
================================================================================
矩阵维度:
  Rust:   (30, 50)
  Python: (30, 50)

非零元素:
  Rust:   17 / 1,500 (1.13%)
  Python: 17 / 1,500 (1.13%)

矩阵差异:
  不同元素数量: 34 / 1,500 (2.27%)
  最大差异: 1.0000
  平均差异: 0.0227

非零元素位置相似度 (Jaccard): 0.0000

================================================================================
MS2 Fragment矩阵
================================================================================
矩阵维度:
  Rust:   (330, 50)
  Python: (330, 50)

非零元素:
  Rust:   538 / 16,500 (3.26%)
  Python: 538 / 16,500 (3.26%)

矩阵差异:
  不同元素数量: 944 / 16,500 (5.72%)
  最大差异: 1.0000
  平均差异: 0.0572

非零元素位置相似度 (Jaccard): 0.0653

================================================================================
Summary文件对比
================================================================================
Rust Summary内容:
----------------------------------------
=== Mask Matrices Summary ===

MS1 Fragment Matrix:
  Shape: [1, 30, 50]
  Non-zero elements: 17 / 1500
  Density: 1.13%

MS2 Fragment Matrix:
  Shape: [1, 330, 50]
  Non-zero elements: 538 / 16500
  Density: 3.26%


Python Summary内容:
----------------------------------------
=== Python Mask Matrices Summary ===

MS1 Fragment Matrix:
  Shape: torch.Size([30, 50])
  Non-zero elements: 17 / 1500
  Density: 1.13%

MS2 Fragment Matrix:
  Shape: torch.Size([330, 50])
  Non-zero elements: 538 / 16500
  Density: 3.26%

Timing Information:
  MS2 extraction total time: 11.44s
  Average time per fragment: 0.14s
  Mask building total time: 0.11s


================================================================================
图表生成
================================================================================
对比图表已保存到: rust_vs_python_comparison.png
